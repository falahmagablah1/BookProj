@using WebApplication1.ViewModels
@model IEnumerable<BookRatingVM>
@{
    ViewData["Title"] = "Book Ratings - Admin View";
    var bookTitle = ViewData["BookTitle"] as string;
}

<div class="container p-3">
    <div class="row pt-4">
        <div class="col-8">
            <h2 class="text-primary">
                <i class="bi bi-star"></i> Book Ratings Management
            </h2>
            @if (!string.IsNullOrEmpty(bookTitle))
            {
                <p class="text-muted">Ratings for: <strong>@bookTitle</strong></p>
            }
            else
            {
                <p class="text-muted">Comprehensive view of all book ratings and reviews</p>
            }
        </div>
        <div class="col-4 text-end">
            <a asp-controller="Items" asp-action="Index" class="btn btn-secondary">
                <i class="bi bi-arrow-left"></i> Back to Books
            </a>
        </div>
    </div>

    <!-- Statistics Cards -->
    <div class="row mb-4">
        <div class="col-md-3">
            <div class="card bg-primary text-white">
                <div class="card-body text-center">
                    <h3 id="totalRatings">@Model.Count()</h3>
                    <p class="mb-0">Total Ratings</p>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card bg-success text-white">
                <div class="card-body text-center">
                    <h3 id="averageRating">
                        @(Model.Any() ? Model.Average(r => r.Rating).ToString("0.1") : "0.0")
                    </h3>
                    <p class="mb-0">Overall Average</p>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card bg-info text-white">
                <div class="card-body text-center">
                    <h3 id="uniqueBooks">@Model.Select(r => r.ItemId).Distinct().Count()</h3>
                    <p class="mb-0">Rated Books</p>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card bg-warning text-dark">
                <div class="card-body text-center">
                    <h3 id="uniqueUsers">@Model.GroupBy(r => r.UserEmail).Count()</h3>
                    <p class="mb-0">Active Reviewers</p>
                </div>
            </div>
        </div>
    </div>

    <!-- Filters and Search -->
    <div class="card mb-3">
        <div class="card-header bg-light">
            <h6 class="mb-0"><i class="bi bi-funnel"></i> Filters & Search</h6>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-md-4">
                    <div class="mb-3">
                        <label for="searchInput" class="form-label">Search:</label>
                        <input type="text" id="searchInput" class="form-control" placeholder="Search by book title, author, or user..." onkeyup="searchRatings()">
                    </div>
                </div>
                <div class="col-md-2">
                    <div class="mb-3">
                        <label for="ratingFilter" class="form-label">Rating:</label>
                        <select id="ratingFilter" class="form-control" onchange="filterRatings()">
                            <option value="">All Ratings</option>
                            <option value="5">5 Stars</option>
                            <option value="4">4 Stars</option>
                            <option value="3">3 Stars</option>
                            <option value="2">2 Stars</option>
                            <option value="1">1 Star</option>
                        </select>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="mb-3">
                        <label for="sortSelect" class="form-label">Sort by:</label>
                        <select id="sortSelect" class="form-control" onchange="sortRatings()">
                            <option value="date-desc">Newest First</option>
                            <option value="date-asc">Oldest First</option>
                            <option value="rating-desc">Highest Rating</option>
                            <option value="rating-asc">Lowest Rating</option>
                            <option value="book-asc">Book Title A-Z</option>
                        </select>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="mb-3">
                        <label class="form-label">Quick Filters:</label>
                        <div class="btn-group d-grid" role="group">
                            <button type="button" class="btn btn-outline-primary btn-sm active" onclick="showAllRatings()">All</button>
                            <button type="button" class="btn btn-outline-success btn-sm" onclick="showHighRatings()">High (4-5★)</button>
                            <button type="button" class="btn btn-outline-danger btn-sm" onclick="showLowRatings()">Low (1-2★)</button>
                            <button type="button" class="btn btn-outline-info btn-sm" onclick="showWithComments()">With Comments</button>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-6">
                    <small id="ratingCount" class="text-muted">
                        Showing <span class="fw-bold">@Model.Count()</span> ratings
                    </small>
                </div>
                <div class="col-md-6 text-end">
                    <button class="btn btn-sm btn-outline-success" onclick="exportRatingsData()">
                        <i class="bi bi-download"></i> Export Ratings
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Ratings Table -->
    <div class="card">
        <div class="card-header">
            <h5 class="mb-0">All Ratings & Reviews</h5>
        </div>
        <div class="card-body p-0">
            <div class="table-responsive">
                <table class="table table-hover mb-0">
                    <thead class="table-dark">
                        <tr>
                            <th><i class="bi bi-book"></i> Book</th>
                            <th><i class="bi bi-person-circle"></i> Author</th>
                            <th><i class="bi bi-tags"></i> Category</th>
                            <th><i class="bi bi-person"></i> User</th>
                            <th><i class="bi bi-star"></i> Rating</th>
                            <th><i class="bi bi-chat-quote"></i> Comment</th>
                            <th><i class="bi bi-calendar"></i> Date</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody id="ratingsTableBody">
                        @foreach (var rating in Model.OrderByDescending(r => r.CreatedDate))
                        {
                            <tr class="rating-row"
                                data-rating="@rating.Rating"
                                data-book-id="@rating.ItemId"
                                data-date="@rating.CreatedDate.ToString("yyyy-MM-dd")">
                                <td>
                                    <div class="fw-bold text-primary">@rating.ItemName</div>
                                    <small class="text-muted">ID: @rating.ItemId</small>
                                </td>
                                <td>
                                    <span class="badge bg-info">@rating.AuthorName</span>
                                </td>
                                <td>
                                    <span class="badge bg-secondary">@rating.CategoryName</span>
                                </td>
                                <td>
                                    <div>
                                        <strong>@rating.UserName</strong>
                                        <br><small class="text-muted">@rating.UserEmail</small>
                                    </div>
                                </td>
                                <td>
                                    <div class="rating-stars">
                                        @for (int i = 1; i <= 5; i++)
                                        {
                                            if (i <= rating.Rating)
                                            {
                                                <i class="bi bi-star-fill text-warning"></i>
                                            }
                                            else
                                            {
                                                <i class="bi bi-star text-muted"></i>
                                            }
                                        }
                                        <span class="ms-2 badge bg-primary">@rating.Rating/5</span>
                                    </div>
                                </td>
                                <td>
                                    @if (!string.IsNullOrEmpty(rating.Comment))
                                    {
                                        <div class="comment-cell" style="max-width: 200px;">
                                            @if (rating.Comment.Length > 50)
                                            {
                                                <span class="comment-short">@rating.Comment.Substring(0, 50)...</span>
                                                <span class="comment-full" style="display: none;">@rating.Comment</span>
                                                <br>
                                                <a href="#" class="text-primary small" onclick="toggleComment(this); return false;">
                                                    <i class="bi bi-arrows-expand"></i> Read more
                                                </a>
                                            }
                                            else
                                            {
                                                <span>@rating.Comment</span>
                                            }
                                        </div>
                                    }
                                    else
                                    {
                                        <em class="text-muted">
                                            <i class="bi bi-chat-x"></i> No comment
                                        </em>
                                    }
                                </td>
                                <td>
                                    <div>@rating.CreatedDate.ToString("dd/MM/yyyy")</div>
                                    <small class="text-muted">@rating.CreatedDate.ToString("HH:mm")</small>
                                </td>
                                <td>
                                    <div class="btn-group" role="group">
                                        <a asp-controller="Items" asp-action="Details" asp-route-id="@rating.ItemId"
                                           class="btn btn-sm btn-outline-primary" title="View Book">
                                            <i class="bi bi-eye"></i>
                                        </a>
                                        <button class="btn btn-sm btn-outline-info"
                                                onclick="showRatingDetails(@rating.Id, '@Html.Raw(rating.ItemName?.Replace("'", "\\'"))', '@Html.Raw(rating.UserName?.Replace("'", "\\'"))', '@rating.Rating', '@Html.Raw((rating.Comment ?? "").Replace("'", "\\'").Replace("\n", "\\n"))', '@rating.CreatedDate.ToString("dd/MM/yyyy HH:mm")')"
                                                title="View Details">
                                            <i class="bi bi-info-circle"></i>
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            @if (!Model.Any())
            {
                <div class="text-center py-5">
                    <i class="bi bi-star display-1 text-muted"></i>
                    <h4 class="mt-3 text-muted">No Ratings Available</h4>
                    <p class="text-muted">There are no book ratings to display.</p>
                </div>
            }
        </div>
    </div>
</div>

<!-- Rating Details Modal -->
<div class="modal fade" id="ratingDetailsModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header bg-info text-white">
                <h5 class="modal-title"><i class="bi bi-star"></i> Rating Details</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body" id="ratingDetailsContent">
                <!-- Content will be loaded dynamically -->
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                    <i class="bi bi-x-circle"></i> Close
                </button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Data and variables
        var ratingsData = [
            @foreach (var rating in Model)
            {
                    <text>{
                        Id: @rating.Id,
                        BookName: "@Html.Raw(rating.ItemName?.Replace("\"", "\\\""))",
                        BookId: @rating.ItemId,
                        AuthorName: "@Html.Raw(rating.AuthorName?.Replace("\"", "\\\""))",
                        CategoryName: "@Html.Raw(rating.CategoryName?.Replace("\"", "\\\""))",
                        UserName: "@Html.Raw(rating.UserName?.Replace("\"", "\\\""))",
                        UserEmail: "@Html.Raw(rating.UserEmail?.Replace("\"", "\\\""))",
                        Rating: @rating.Rating,
                        Comment: "@Html.Raw((rating.Comment ?? "").Replace("\"", "\\\"").Replace("\r\n", "\\n").Replace("\n", "\\n"))",
                        CreatedDate: "@rating.CreatedDate.ToString("yyyy-MM-dd")",
                        CreatedDateTime: "@rating.CreatedDate.ToString("dd/MM/yyyy HH:mm")"
                    },</text>
            }
        ];

        var originalTableContent = '';

        $(document).ready(function() {
            originalTableContent = $('#ratingsTableBody').html();
            initializeCustomStyles();
            console.log('Ratings page initialized with ' + ratingsData.length + ' ratings');
        });

        // Search functionality
        function searchRatings() {
            var searchTerm = $('#searchInput').val().toLowerCase();
            var rows = $('.rating-row');
            var visibleCount = 0;

            rows.each(function() {
                var row = $(this);
                var bookName = row.find('td:eq(0)').text().toLowerCase();
                var authorName = row.find('td:eq(1)').text().toLowerCase();
                var userName = row.find('td:eq(3)').text().toLowerCase();

                if (bookName.includes(searchTerm) || authorName.includes(searchTerm) || userName.includes(searchTerm)) {
                    row.show();
                    visibleCount++;
                } else {
                    row.hide();
                }
            });

            updateRatingCount(visibleCount);
        }

        // Filter by rating
        function filterRatings() {
            var selectedRating = $('#ratingFilter').val();
            var rows = $('.rating-row');
            var visibleCount = 0;

            rows.each(function() {
                var row = $(this);
                var rating = row.data('rating').toString();

                if (!selectedRating || rating === selectedRating) {
                    row.show();
                    visibleCount++;
                } else {
                    row.hide();
                }
            });

            updateRatingCount(visibleCount);
        }

        // Sort ratings
        function sortRatings() {
            var sortValue = $('#sortSelect').val();
            var sortedRatings = ratingsData.slice();

            switch(sortValue) {
                case 'date-desc':
                    sortedRatings.sort((a, b) => new Date(b.CreatedDate) - new Date(a.CreatedDate));
                    break;
                case 'date-asc':
                    sortedRatings.sort((a, b) => new Date(a.CreatedDate) - new Date(b.CreatedDate));
                    break;
                case 'rating-desc':
                    sortedRatings.sort((a, b) => b.Rating - a.Rating);
                    break;
                case 'rating-asc':
                    sortedRatings.sort((a, b) => a.Rating - b.Rating);
                    break;
                case 'book-asc':
                    sortedRatings.sort((a, b) => (a.BookName || '').localeCompare(b.BookName || ''));
                    break;
            }

            renderRatingsTable(sortedRatings);
        }

        // Quick filter functions
        function showAllRatings() {
            setActiveFilterButton(0);
            renderRatingsTable(ratingsData);
            updateRatingCount(ratingsData.length);
        }

        function showHighRatings() {
            setActiveFilterButton(1);
            var highRatings = ratingsData.filter(r => r.Rating >= 4);
            renderRatingsTable(highRatings);
            updateRatingCount(highRatings.length);
        }

        function showLowRatings() {
            setActiveFilterButton(2);
            var lowRatings = ratingsData.filter(r => r.Rating <= 2);
            renderRatingsTable(lowRatings);
            updateRatingCount(lowRatings.length);
        }

        function showWithComments() {
            setActiveFilterButton(3);
            var withComments = ratingsData.filter(r => r.Comment && r.Comment.trim() !== '');
            renderRatingsTable(withComments);
            updateRatingCount(withComments.length);
        }

        function setActiveFilterButton(index) {
            $('.btn-group .btn').removeClass('active');
            $('.btn-group .btn').eq(index).addClass('active');
        }

        // Render ratings table
        function renderRatingsTable(ratings) {
            var tbody = $('#ratingsTableBody');
            tbody.empty();

            if (ratings.length === 0) {
                tbody.append(`
                    <tr>
                        <td colspan="8" class="text-center py-4">
                            <i class="bi bi-search text-muted" style="font-size: 2rem;"></i>
                            <p class="text-muted mt-2">No ratings found matching your criteria</p>
                        </td>
                    </tr>
                `);
                return;
            }

            ratings.forEach(function(rating) {
                var row = createRatingRow(rating);
                tbody.append(row);
            });
        }

        function createRatingRow(rating) {
            var stars = '';
            for (var i = 1; i <= 5; i++) {
                if (i <= rating.Rating) {
                    stars += '<i class="bi bi-star-fill text-warning"></i>';
                } else {
                    stars += '<i class="bi bi-star text-muted"></i>';
                }
            }

            var commentCell = '';
            if (rating.Comment && rating.Comment.trim() !== '') {
                if (rating.Comment.length > 50) {
                    commentCell = `
                        <div class="comment-cell" style="max-width: 200px;">
                            <span class="comment-short">${rating.Comment.substring(0, 50)}...</span>
                            <span class="comment-full" style="display: none;">${rating.Comment}</span>
                            <br><a href="#" class="text-primary small" onclick="toggleComment(this); return false;">
                                <i class="bi bi-arrows-expand"></i> Read more
                            </a>
                        </div>
                    `;
                } else {
                    commentCell = `<span>${rating.Comment}</span>`;
                }
            } else {
                commentCell = '<em class="text-muted"><i class="bi bi-chat-x"></i> No comment</em>';
            }

            return `
                <tr class="rating-row" data-rating="${rating.Rating}" data-book-id="${rating.BookId}" data-date="${rating.CreatedDate}">
                    <td>
                        <div class="fw-bold text-primary">${rating.BookName}</div>
                        <small class="text-muted">ID: ${rating.BookId}</small>
                    </td>
                    <td><span class="badge bg-info">${rating.AuthorName}</span></td>
                    <td><span class="badge bg-secondary">${rating.CategoryName}</span></td>
                    <td>
                        <div>
                            <strong>${rating.UserName}</strong>
                            <br><small class="text-muted">${rating.UserEmail}</small>
                        </div>
                    </td>
                    <td>
                        <div class="rating-stars">
                            ${stars}
                            <span class="ms-2 badge bg-primary">${rating.Rating}/5</span>
                        </div>
                    </td>
                    <td>${commentCell}</td>
                    <td>
                        <div>${new Date(rating.CreatedDate).toLocaleDateString()}</div>
                        <small class="text-muted">${new Date(rating.CreatedDate + 'T00:00:00').toLocaleTimeString()}</small>
                    </td>
                    <td>
                        <div class="btn-group" role="group">
                            <a href="/Items/Details/${rating.BookId}" class="btn btn-sm btn-outline-primary" title="View Book">
                                <i class="bi bi-eye"></i>
                            </a>
                            <button class="btn btn-sm btn-outline-info"
                                onclick="showRatingDetails(${rating.Id}, '${rating.BookName.replace(/'/g, "\\'")}', '${rating.UserName.replace(/'/g, "\\'")}', ${rating.Rating}, '${(rating.Comment || '').replace(/'/g, "\\'").replace(/\n/g, '\\n')}', '${rating.CreatedDateTime}')"
                                title="View Details">
                                <i class="bi bi-info-circle"></i>
                            </button>
                        </div>
                    </td>
                </tr>
            `;
        }

        // Toggle comment display
        function toggleComment(link) {
            var commentCell = $(link).closest('.comment-cell');
            var shortText = commentCell.find('.comment-short');
            var fullText = commentCell.find('.comment-full');
            var linkElement = $(link);

            if (fullText.is(':visible')) {
                fullText.hide();
                shortText.show();
                linkElement.html('<i class="bi bi-arrows-expand"></i> Read more');
            } else {
                shortText.hide();
                fullText.show();
                linkElement.html('<i class="bi bi-arrows-collapse"></i> Read less');
            }
        }

        // Show rating details modal
        function showRatingDetails(id, bookName, userName, rating, comment, createdDate) {
            var modalContent = `
                <div class="container-fluid">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="card border-primary">
                                <div class="card-header bg-primary text-white">
                                    <h6 class="mb-0"><i class="bi bi-book"></i> Book Information</h6>
                                </div>
                                <div class="card-body">
                                    <table class="table table-sm table-borderless">
                                        <tr><td><strong>Title:</strong></td><td>${bookName}</td></tr>
                                        <tr><td><strong>Rating ID:</strong></td><td>#${id}</td></tr>
                                    </table>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="card border-info">
                                <div class="card-header bg-info text-white">
                                    <h6 class="mb-0"><i class="bi bi-person"></i> User Information</h6>
                                </div>
                                <div class="card-body">
                                    <table class="table table-sm table-borderless">
                                        <tr><td><strong>Name:</strong></td><td>${userName}</td></tr>
                                        <tr><td><strong>Date:</strong></td><td>${createdDate}</td></tr>
                                    </table>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="row mt-3">
                        <div class="col-12">
                            <div class="card border-warning">
                                <div class="card-header bg-warning text-dark">
                                    <h6 class="mb-0"><i class="bi bi-star"></i> Rating & Review</h6>
                                </div>
                                <div class="card-body">
                                    <div class="mb-3">
                                        <strong>Rating: </strong>
            `;

            // Add stars
            for (var i = 1; i <= 5; i++) {
                if (i <= rating) {
                    modalContent += '<i class="bi bi-star-fill text-warning"></i>';
                } else {
                    modalContent += '<i class="bi bi-star text-muted"></i>';
                }
            }

            modalContent += ` <span class="badge bg-primary ms-2">${rating}/5</span>
                                    </div>
            `;

            if (comment && comment.trim() !== '') {
                modalContent += `
                                    <div><strong>Comment:</strong></div>
                                    <div class="border p-3 bg-light rounded mt-2">
                                        ${comment.replace(/\n/g, '<br>')}
                                    </div>
                `;
            } else {
                modalContent += `
                                    <div class="text-muted">
                                        <em><i class="bi bi-chat-x"></i> No comment provided</em>
                                    </div>
                `;
            }

            modalContent += `
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            `;

            $('#ratingDetailsContent').html(modalContent);
            var modal = new bootstrap.Modal($('#ratingDetailsModal')[0]);
            modal.show();
        }

        // Export ratings data
        function exportRatingsData() {
            var csvContent = "data:text/csv;charset=utf-8,";
            csvContent += "Book Title,Author,Category,User Name,User Email,Rating,Comment,Date\n";

            ratingsData.forEach(function(rating) {
                var row = [
                    '"' + (rating.BookName || '').replace(/"/g, '""') + '"',
                    '"' + (rating.AuthorName || '').replace(/"/g, '""') + '"',
                    '"' + (rating.CategoryName || '').replace(/"/g, '""') + '"',
                    '"' + (rating.UserName || '').replace(/"/g, '""') + '"',
                    '"' + (rating.UserEmail || '').replace(/"/g, '""') + '"',
                    rating.Rating,
                    '"' + (rating.Comment || '').replace(/"/g, '""') + '"',
                    '"' + rating.CreatedDateTime + '"'
                ].join(",");
                csvContent += row + "\n";
            });

            var encodedUri = encodeURI(csvContent);
            var link = document.createElement("a");
            link.setAttribute("href", encodedUri);
            link.setAttribute("download", "book_ratings_" + new Date().toISOString().slice(0,10) + ".csv");
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
        }

        // Update rating count
        function updateRatingCount(count) {
            var countElement = $('#ratingCount');
            var totalCount = count !== undefined ? count : $('.rating-row:visible').length;
            countElement.html('Showing <span class="fw-bold">' + totalCount + '</span> ratings');
        }

        // Custom styles
        function initializeCustomStyles() {
            var style = `
                <style>
                    .table tbody tr { transition: background-color 0.2s ease; }
                    .table tbody tr:hover { background-color: rgba(0,123,255,0.05) !important; }
                    .rating-stars { font-size: 1.1em; }
                    .comment-cell { line-height: 1.4; }
                    .btn { transition: all 0.2s ease; }
                    .btn:hover { transform: translateY(-1px); }
                    .modal-content { border-radius: 10px; box-shadow: 0 10px 30px rgba(0,0,0,0.2); }
                    .card { transition: transform 0.2s ease; }
                    .card:hover { transform: translateY(-2px); }
                    .btn-group .btn { margin-right: 2px; }
                </style>
            `;
            $('head').append(style);
        }
    </script>
}